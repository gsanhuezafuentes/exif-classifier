// Code generated by mockery v2.40.1. DO NOT EDIT.

package exif_reader

import (
	io "io"

	mock "github.com/stretchr/testify/mock"
)

// MockExifPrinter is an autogenerated mock type for the ExifPrinter type
type MockExifPrinter struct {
	mock.Mock
}

type MockExifPrinter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExifPrinter) EXPECT() *MockExifPrinter_Expecter {
	return &MockExifPrinter_Expecter{mock: &_m.Mock}
}

// PrintExif provides a mock function with given fields: imagePath, out
func (_m *MockExifPrinter) PrintExif(imagePath string, out io.Writer) error {
	ret := _m.Called(imagePath, out)

	if len(ret) == 0 {
		panic("no return value specified for PrintExif")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, io.Writer) error); ok {
		r0 = rf(imagePath, out)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockExifPrinter_PrintExif_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrintExif'
type MockExifPrinter_PrintExif_Call struct {
	*mock.Call
}

// PrintExif is a helper method to define mock.On call
//   - imagePath string
//   - out io.Writer
func (_e *MockExifPrinter_Expecter) PrintExif(imagePath interface{}, out interface{}) *MockExifPrinter_PrintExif_Call {
	return &MockExifPrinter_PrintExif_Call{Call: _e.mock.On("PrintExif", imagePath, out)}
}

func (_c *MockExifPrinter_PrintExif_Call) Run(run func(imagePath string, out io.Writer)) *MockExifPrinter_PrintExif_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(io.Writer))
	})
	return _c
}

func (_c *MockExifPrinter_PrintExif_Call) Return(_a0 error) *MockExifPrinter_PrintExif_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExifPrinter_PrintExif_Call) RunAndReturn(run func(string, io.Writer) error) *MockExifPrinter_PrintExif_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockExifPrinter creates a new instance of MockExifPrinter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExifPrinter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExifPrinter {
	mock := &MockExifPrinter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
